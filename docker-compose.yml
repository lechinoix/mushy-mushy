services:
    db:
        image: postgres:12
        restart: always
        healthcheck:
            test:
                [
                    "CMD-SHELL",
                    "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}",
                ]
            interval: 10s
            retries: 5
            start_period: 30s
            timeout: 10s
        volumes:
            - app-db-data:/var/lib/postgresql/data/pgdata
        env_file:
            - .env
        environment:
            - PGDATA=/var/lib/postgresql/data/pgdata
            - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
            - POSTGRES_USER=${POSTGRES_USER}
            - POSTGRES_DB=${POSTGRES_DB}
            - POSTGRES_MULTIPLE_EXTENSIONS=postgis,hstore,postgis_topology,postgis_raster,pgrouting

    adminer:
        image: adminer
        restart: always
        networks:
            - traefik-public
            - default
        depends_on:
            - db
        environment:
            - ADMINER_DESIGN=pepa-linha-dark
        labels:
            - traefik.enable=true
            - traefik.docker.network=traefik-public
            - traefik.constraint-label=traefik-public
            - traefik.http.routers.${STACK_NAME}-adminer-http.rule=Host(`adminer.${DOMAIN}`)
            - traefik.http.routers.${STACK_NAME}-adminer-http.entrypoints=http
            - traefik.http.routers.${STACK_NAME}-adminer-http.middlewares=https-redirect
            - traefik.http.routers.${STACK_NAME}-adminer-https.rule=Host(`adminer.${DOMAIN}`)
            - traefik.http.routers.${STACK_NAME}-adminer-https.entrypoints=https
            - traefik.http.routers.${STACK_NAME}-adminer-https.tls=true
            - traefik.http.routers.${STACK_NAME}-adminer-https.tls.certresolver=le
            - traefik.http.services.${STACK_NAME}-adminer.loadbalancer.server.port=8080

    prestart:
        image: "${DOCKER_IMAGE_BACKEND}:${TAG-latest}"
        build:
            context: ./backend
        networks:
            - traefik-public
            - default
        depends_on:
            db:
                condition: service_healthy
                restart: true
        command: bash scripts/prestart.sh
        env_file:
            - .env
        environment:
            - DOMAIN=${DOMAIN}
            - FRONTEND_HOST=${FRONTEND_HOST}
            - ENVIRONMENT=${ENVIRONMENT}
            - BACKEND_CORS_ORIGINS=${BACKEND_CORS_ORIGINS}
            - SECRET_KEY=${SECRET_KEY}
            - FIRST_SUPERUSER=${FIRST_SUPERUSER}
            - FIRST_SUPERUSER_PASSWORD=${FIRST_SUPERUSER_PASSWORD}
            - SMTP_HOST=${SMTP_HOST}
            - SMTP_USER=${SMTP_USER}
            - SMTP_PASSWORD=${SMTP_PASSWORD}
            - EMAILS_FROM_EMAIL=${EMAILS_FROM_EMAIL}
            - POSTGRES_SERVER=db
            - POSTGRES_PORT=${POSTGRES_PORT}
            - POSTGRES_DB=${POSTGRES_DB}
            - POSTGRES_USER=${POSTGRES_USER}
            - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
            - SENTRY_DSN=${SENTRY_DSN}

    backend:
        image: "${DOCKER_IMAGE_BACKEND}:${TAG-latest}"
        restart: always
        networks:
            - traefik-public
            - default
        depends_on:
            db:
                condition: service_healthy
                restart: true
            prestart:
                condition: service_completed_successfully
        env_file:
            - .env
        environment:
            - DOMAIN=${DOMAIN}
            - FRONTEND_HOST=${FRONTEND_HOST}
            - ENVIRONMENT=${ENVIRONMENT}
            - BACKEND_CORS_ORIGINS=${BACKEND_CORS_ORIGINS}
            - SECRET_KEY=${SECRET_KEY}
            - FIRST_SUPERUSER=${FIRST_SUPERUSER}
            - FIRST_SUPERUSER_PASSWORD=${FIRST_SUPERUSER_PASSWORD}
            - SMTP_HOST=${SMTP_HOST}
            - SMTP_USER=${SMTP_USER}
            - SMTP_PASSWORD=${SMTP_PASSWORD}
            - EMAILS_FROM_EMAIL=${EMAILS_FROM_EMAIL}
            - POSTGRES_SERVER=db
            - POSTGRES_PORT=${POSTGRES_PORT}
            - POSTGRES_DB=${POSTGRES_DB}
            - POSTGRES_USER=${POSTGRES_USER}
            - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
            - SENTRY_DSN=${SENTRY_DSN}

        healthcheck:
            test:
                [
                    "CMD",
                    "curl",
                    "-f",
                    "http://localhost:8000/api/v1/utils/health-check/",
                ]
            interval: 10s
            timeout: 5s
            retries: 5

        build:
            context: ./backend
        labels:
            - traefik.enable=true
            - traefik.docker.network=traefik-public
            - traefik.constraint-label=traefik-public

            - traefik.http.services.${STACK_NAME}-backend.loadbalancer.server.port=8000

            - traefik.http.routers.${STACK_NAME}-backend-http.rule=Host(`api.${DOMAIN}`)
            - traefik.http.routers.${STACK_NAME}-backend-http.entrypoints=http

            - traefik.http.routers.${STACK_NAME}-backend-https.rule=Host(`api.${DOMAIN}`)
            - traefik.http.routers.${STACK_NAME}-backend-https.entrypoints=https
            - traefik.http.routers.${STACK_NAME}-backend-https.tls=true
            - traefik.http.routers.${STACK_NAME}-backend-https.tls.certresolver=le

            # Enable redirection for HTTP and HTTPS
            - traefik.http.routers.${STACK_NAME}-backend-http.middlewares=https-redirect

    geoserver:
        image: "docker.osgeo.org/geoserver:2.26.0"
        platform: linux/amd64
        restart: always
        networks:
            - traefik-public
            - default
        depends_on:
            db:
                condition: service_healthy
                restart: true
            prestart:
                condition: service_completed_successfully
        env_file:
            - .env
        volumes:
            # This path is specified by the GEOSERVER_DATA_DIR
            - geoserver_data:/opt/geoserver/data_dir
            # Mounted in to geoserver for serving geoserver data
            # store
            - ./gis:/opt/geoserver/user_data
        environment:
            - ADMIN_USERNAME=${GEOSERVER_ADMIN_USER}
            - ADMIN_PASSWORD=${GEOSERVER_ADMIN_PASSWORD}
            - INITIAL_MEMORY=${GEOSERVER_INITIAL_MEMORY}
            - MAXIMUM_MEMORY=${GEOSERVER_MAXIMUM_MEMORY}
            - STABLE_EXTENSIONS=importer-plugin
            - GEOSERVER_DATA_DIR=/opt/geoserver/data_dir
            - GEOSERVER_REQUIRE_FILE=/opt/geoserver/data_dir/global.xml
            - CORS_ENABLED=true
            - CORS_ALLOWED_ORIGINS=*

        healthcheck:
            test: "curl --fail --silent --write-out 'HTTP CODE : %{http_code}\n' --output /dev/null http://127.0.0.1:8081/geoserver"
            interval: 60s
            timeout: 10s
            retries: 1
            start_period: 60s

        labels:
            - traefik.enable=true
            - traefik.docker.network=traefik-public
            - traefik.constraint-label=traefik-public

            - traefik.http.services.${STACK_NAME}-geoserver.loadbalancer.server.port=8081

            - traefik.http.routers.${STACK_NAME}-geoserver-http.rule=Host(`geoserver.${DOMAIN}`)
            - traefik.http.routers.${STACK_NAME}-geoserver-http.entrypoints=http

            - traefik.http.routers.${STACK_NAME}-geoserver-https.rule=Host(`geoserver.${DOMAIN}`)
            - traefik.http.routers.${STACK_NAME}-geoserver-https.entrypoints=https
            - traefik.http.routers.${STACK_NAME}-geoserver-https.tls=true
            - traefik.http.routers.${STACK_NAME}-geoserver-https.tls.certresolver=le

            # Enable redirection for HTTP and HTTPS
            - traefik.http.routers.${STACK_NAME}-geoserver-http.middlewares=https-redirect

    frontend:
        image: "${DOCKER_IMAGE_FRONTEND}:${TAG-latest}"
        restart: always
        networks:
            - traefik-public
            - default
        build:
            context: ./frontend
            args:
                - VITE_API_URL=https://api.${DOMAIN}
                - NODE_ENV=production
        labels:
            - traefik.enable=true
            - traefik.docker.network=traefik-public
            - traefik.constraint-label=traefik-public

            - traefik.http.services.${STACK_NAME}-frontend.loadbalancer.server.port=80

            - traefik.http.routers.${STACK_NAME}-frontend-http.rule=Host(`dashboard.${DOMAIN}`)
            - traefik.http.routers.${STACK_NAME}-frontend-http.entrypoints=http

            - traefik.http.routers.${STACK_NAME}-frontend-https.rule=Host(`dashboard.${DOMAIN}`)
            - traefik.http.routers.${STACK_NAME}-frontend-https.entrypoints=https
            - traefik.http.routers.${STACK_NAME}-frontend-https.tls=true
            - traefik.http.routers.${STACK_NAME}-frontend-https.tls.certresolver=le

            # Enable redirection for HTTP and HTTPS
            - traefik.http.routers.${STACK_NAME}-frontend-http.middlewares=https-redirect
volumes:
    app-db-data:
    geoserver_user_data:
    geoserver_data:

networks:
    traefik-public:
        # Allow setting it to false for testing
        external: true
